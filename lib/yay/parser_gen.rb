#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.7
# from Racc grammer file "".
#

require 'racc/parser.rb'

class Yay
class ParserGen < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 54)

...end grammar.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    -4,    -7,   -25,     4,    27,    26,   -25,    12,    20,    25,
    20,    21,     2,     4,     8,     9,    11,    12,     4,    21,
     9,    11,    12,    31,    34,    21,    32,    32,    18,    17,
    38,    32,    38,    21 ]

racc_action_check = [
     7,    10,     6,    19,    18,    17,     6,    19,     6,    11,
    10,     7,     0,     0,     0,     0,     0,     0,    24,    21,
    24,    24,    24,    22,    23,     9,    22,    23,     3,     2,
    30,    32,    33,    36 ]

racc_action_pointer = [
    10,   nil,    26,    28,   nil,   nil,    -1,     0,   nil,    14,
     1,     6,   nil,   nil,   nil,   nil,   nil,     2,     4,     0,
   nil,     8,    18,    19,    15,   nil,   nil,   nil,   nil,   nil,
    20,   nil,    23,    22,   nil,   nil,    22,   nil,   nil,   nil,
   nil ]

racc_action_default = [
    -5,   -12,   -30,   -30,   -20,    -1,   -19,   -29,    -3,   -29,
   -25,   -30,   -21,    -8,    -9,   -10,   -11,   -30,   -30,   -30,
   -24,   -29,   -30,   -30,   -30,   -17,    -2,    41,   -18,   -28,
   -27,   -14,   -23,   -27,   -16,    -6,   -29,   -13,   -26,   -22,
   -15 ]

racc_goto_table = [
     7,     5,    23,    30,    33,    19,     3,    37,   nil,    24,
    40,   nil,   nil,    39,    29,   nil,   nil,   nil,   nil,    28,
   nil,   nil,   nil,   nil,    36,    35 ]

racc_goto_check = [
     3,     2,    11,    12,    12,     5,     1,    13,   nil,     5,
    13,   nil,   nil,    12,    11,   nil,   nil,   nil,   nil,     3,
   nil,   nil,   nil,   nil,     3,     2 ]

racc_goto_pointer = [
   nil,     6,     1,     0,   nil,    -1,   nil,   nil,   nil,   nil,
   nil,    -7,   -19,   -23,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,    10,   nil,    13,    14,    15,    16,
     1,    22,   nil,   nil,     6 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 13, :_reduce_1,
  3, 13, :_reduce_2,
  1, 13, :_reduce_3,
  1, 13, :_reduce_4,
  0, 13, :_reduce_5,
  3, 14, :_reduce_6,
  1, 14, :_reduce_7,
  1, 16, :_reduce_none,
  1, 16, :_reduce_none,
  1, 16, :_reduce_none,
  1, 16, :_reduce_none,
  1, 16, :_reduce_none,
  4, 18, :_reduce_13,
  3, 19, :_reduce_14,
  4, 20, :_reduce_15,
  3, 21, :_reduce_16,
  2, 22, :_reduce_17,
  3, 15, :_reduce_18,
  1, 15, :_reduce_19,
  1, 26, :_reduce_20,
  1, 26, :_reduce_21,
  2, 24, :_reduce_22,
  1, 24, :_reduce_23,
  1, 17, :_reduce_24,
  0, 17, :_reduce_25,
  1, 25, :_reduce_26,
  0, 25, :_reduce_27,
  2, 23, :_reduce_28,
  0, 23, :_reduce_29 ]

racc_reduce_n = 30

racc_shift_n = 41

racc_token_table = {
  false => 0,
  :error => 1,
  :install => 2,
  :literal => 3,
  :list_installed => 4,
  :variable => 5,
  :include => 6,
  :regex => 7,
  :colour => 8,
  :and => 9,
  :line => 10,
  :verb => 11 }

racc_nt_base = 12

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "install",
  "literal",
  "list_installed",
  "variable",
  "include",
  "regex",
  "colour",
  "and",
  "line",
  "verb",
  "$start",
  "body",
  "command_list",
  "string_list",
  "command",
  "and_opt",
  "match",
  "assignment",
  "substitution",
  "equivalence",
  "include_file",
  "verbs_opt",
  "colour_list",
  "line_opt",
  "string" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 5)
  def _reduce_1(val, _values, result)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 6)
  def _reduce_2(val, _values, result)
     install_file val[1], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 7)
  def _reduce_3(val, _values, result)
     list_installed 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 8)
  def _reduce_4(val, _values, result)
     include_or_autoformat val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 9)
  def _reduce_5(val, _values, result)
     use_default_file 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 11)
  def _reduce_6(val, _values, result)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 12)
  def _reduce_7(val, _values, result)
      
    result
  end
.,.,

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

module_eval(<<'.,.,', 'grammar.y', 20)
  def _reduce_13(val, _values, result)
     @ruleset.add_match val[0], handle_colours(val[2]), val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 22)
  def _reduce_14(val, _values, result)
     @ruleset.add_assignment val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 24)
  def _reduce_15(val, _values, result)
     @ruleset.add_substitution val[0], handle_colours(val[2]), val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 26)
  def _reduce_16(val, _values, result)
     @ruleset.add_equivalence val[0], val[2]  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 28)
  def _reduce_17(val, _values, result)
     include_file val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 30)
  def _reduce_18(val, _values, result)
     val[2].unshift(val[0]); result = val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 31)
  def _reduce_19(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 33)
  def _reduce_20(val, _values, result)
     result = handle_string(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 34)
  def _reduce_21(val, _values, result)
     result = handle_regex(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 36)
  def _reduce_22(val, _values, result)
     val[1].unshift(val[0].to_sym); result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 37)
  def _reduce_23(val, _values, result)
     result = [val[0].to_sym] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 39)
  def _reduce_24(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 40)
  def _reduce_25(val, _values, result)
     
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 42)
  def _reduce_26(val, _values, result)
     result = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 43)
  def _reduce_27(val, _values, result)
     result = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 45)
  def _reduce_28(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 46)
  def _reduce_29(val, _values, result)
     
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class ParserGen

end # class Yay
